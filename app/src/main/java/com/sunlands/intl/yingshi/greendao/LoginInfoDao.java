package com.sunlands.intl.yingshi.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sunlands.intl.yingshi.greendao.db.LoginInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_INFO".
*/
public class LoginInfoDao extends AbstractDao<LoginInfo, Long> {

    public static final String TABLENAME = "LOGIN_INFO";

    /**
     * Properties of entity LoginInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "USER_ID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Surname = new Property(3, String.class, "surname", false, "SURNAME");
        public final static Property Sex = new Property(4, int.class, "sex", false, "SEX");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property Tel = new Property(6, String.class, "tel", false, "TEL");
        public final static Property SessionKey = new Property(7, String.class, "sessionKey", false, "SESSION_KEY");
        public final static Property StuId = new Property(8, int.class, "stuId", false, "STU_ID");
        public final static Property Term = new Property(9, String.class, "term", false, "TERM");
        public final static Property FullTel = new Property(10, String.class, "fullTel", false, "FULL_TEL");
        public final static Property Entrance = new Property(11, int.class, "entrance", false, "ENTRANCE");
        public final static Property Export = new Property(12, int.class, "export", false, "EXPORT");
        public final static Property Url = new Property(13, String.class, "url", false, "URL");
        public final static Property IsVip = new Property(14, int.class, "isVip", false, "IS_VIP");
        public final static Property University = new Property(15, String.class, "university", false, "UNIVERSITY");
    }


    public LoginInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LoginInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"USERNAME\" TEXT," + // 2: username
                "\"SURNAME\" TEXT," + // 3: surname
                "\"SEX\" INTEGER NOT NULL ," + // 4: sex
                "\"AVATAR\" TEXT," + // 5: avatar
                "\"TEL\" TEXT," + // 6: tel
                "\"SESSION_KEY\" TEXT," + // 7: sessionKey
                "\"STU_ID\" INTEGER NOT NULL ," + // 8: stuId
                "\"TERM\" TEXT," + // 9: term
                "\"FULL_TEL\" TEXT," + // 10: fullTel
                "\"ENTRANCE\" INTEGER NOT NULL ," + // 11: entrance
                "\"EXPORT\" INTEGER NOT NULL ," + // 12: export
                "\"URL\" TEXT," + // 13: url
                "\"IS_VIP\" INTEGER NOT NULL ," + // 14: isVip
                "\"UNIVERSITY\" TEXT);"); // 15: university
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String surname = entity.getSurname();
        if (surname != null) {
            stmt.bindString(4, surname);
        }
        stmt.bindLong(5, entity.getSex());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(7, tel);
        }
 
        String sessionKey = entity.getSessionKey();
        if (sessionKey != null) {
            stmt.bindString(8, sessionKey);
        }
        stmt.bindLong(9, entity.getStuId());
 
        String term = entity.getTerm();
        if (term != null) {
            stmt.bindString(10, term);
        }
 
        String fullTel = entity.getFullTel();
        if (fullTel != null) {
            stmt.bindString(11, fullTel);
        }
        stmt.bindLong(12, entity.getEntrance());
        stmt.bindLong(13, entity.getExport());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(14, url);
        }
        stmt.bindLong(15, entity.getIsVip());
 
        String university = entity.getUniversity();
        if (university != null) {
            stmt.bindString(16, university);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String surname = entity.getSurname();
        if (surname != null) {
            stmt.bindString(4, surname);
        }
        stmt.bindLong(5, entity.getSex());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(7, tel);
        }
 
        String sessionKey = entity.getSessionKey();
        if (sessionKey != null) {
            stmt.bindString(8, sessionKey);
        }
        stmt.bindLong(9, entity.getStuId());
 
        String term = entity.getTerm();
        if (term != null) {
            stmt.bindString(10, term);
        }
 
        String fullTel = entity.getFullTel();
        if (fullTel != null) {
            stmt.bindString(11, fullTel);
        }
        stmt.bindLong(12, entity.getEntrance());
        stmt.bindLong(13, entity.getExport());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(14, url);
        }
        stmt.bindLong(15, entity.getIsVip());
 
        String university = entity.getUniversity();
        if (university != null) {
            stmt.bindString(16, university);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoginInfo readEntity(Cursor cursor, int offset) {
        LoginInfo entity = new LoginInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // surname
            cursor.getInt(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sessionKey
            cursor.getInt(offset + 8), // stuId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // term
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fullTel
            cursor.getInt(offset + 11), // entrance
            cursor.getInt(offset + 12), // export
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // url
            cursor.getInt(offset + 14), // isVip
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // university
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSurname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.getInt(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSessionKey(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStuId(cursor.getInt(offset + 8));
        entity.setTerm(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFullTel(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEntrance(cursor.getInt(offset + 11));
        entity.setExport(cursor.getInt(offset + 12));
        entity.setUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsVip(cursor.getInt(offset + 14));
        entity.setUniversity(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
