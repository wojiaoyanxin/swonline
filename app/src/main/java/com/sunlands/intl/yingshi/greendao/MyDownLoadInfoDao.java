package com.sunlands.intl.yingshi.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.arialyy.aria.core.download.DownloadEntity;
import com.sunlands.intl.yingshi.greendao.db.Temp_DownloadEntity;

import com.sunlands.intl.yingshi.greendao.db.MyDownLoadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_DOWN_LOAD_INFO".
*/
public class MyDownLoadInfoDao extends AbstractDao<MyDownLoadInfo, Long> {

    public static final String TABLENAME = "MY_DOWN_LOAD_INFO";

    /**
     * Properties of entity MyDownLoadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property FileType = new Property(2, String.class, "fileType", false, "FILE_TYPE");
        public final static Property SchoolName = new Property(3, String.class, "schoolName", false, "SCHOOL_NAME");
        public final static Property SchoolId = new Property(4, int.class, "schoolId", false, "SCHOOL_ID");
        public final static Property ProductName = new Property(5, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property ProduceId = new Property(6, int.class, "produceId", false, "PRODUCE_ID");
        public final static Property CourseName = new Property(7, String.class, "courseName", false, "COURSE_NAME");
        public final static Property CourseId = new Property(8, int.class, "courseId", false, "COURSE_ID");
        public final static Property FileName = new Property(9, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileId = new Property(10, int.class, "fileId", false, "FILE_ID");
        public final static Property LastProgress = new Property(11, int.class, "lastProgress", false, "LAST_PROGRESS");
        public final static Property DownloadEntity = new Property(12, String.class, "downloadEntity", false, "DOWNLOAD_ENTITY");
    }

    private final Temp_DownloadEntity downloadEntityConverter = new Temp_DownloadEntity();

    public MyDownLoadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MyDownLoadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_DOWN_LOAD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"FILE_TYPE\" TEXT," + // 2: fileType
                "\"SCHOOL_NAME\" TEXT," + // 3: schoolName
                "\"SCHOOL_ID\" INTEGER NOT NULL ," + // 4: schoolId
                "\"PRODUCT_NAME\" TEXT," + // 5: productName
                "\"PRODUCE_ID\" INTEGER NOT NULL ," + // 6: produceId
                "\"COURSE_NAME\" TEXT," + // 7: courseName
                "\"COURSE_ID\" INTEGER NOT NULL ," + // 8: courseId
                "\"FILE_NAME\" TEXT," + // 9: fileName
                "\"FILE_ID\" INTEGER NOT NULL ," + // 10: fileId
                "\"LAST_PROGRESS\" INTEGER NOT NULL ," + // 11: lastProgress
                "\"DOWNLOAD_ENTITY\" TEXT);"); // 12: downloadEntity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_DOWN_LOAD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyDownLoadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(3, fileType);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(4, schoolName);
        }
        stmt.bindLong(5, entity.getSchoolId());
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(6, productName);
        }
        stmt.bindLong(7, entity.getProduceId());
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(8, courseName);
        }
        stmt.bindLong(9, entity.getCourseId());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(10, fileName);
        }
        stmt.bindLong(11, entity.getFileId());
        stmt.bindLong(12, entity.getLastProgress());
 
        DownloadEntity downloadEntity = entity.getDownloadEntity();
        if (downloadEntity != null) {
            stmt.bindString(13, downloadEntityConverter.convertToDatabaseValue(downloadEntity));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyDownLoadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(3, fileType);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(4, schoolName);
        }
        stmt.bindLong(5, entity.getSchoolId());
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(6, productName);
        }
        stmt.bindLong(7, entity.getProduceId());
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(8, courseName);
        }
        stmt.bindLong(9, entity.getCourseId());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(10, fileName);
        }
        stmt.bindLong(11, entity.getFileId());
        stmt.bindLong(12, entity.getLastProgress());
 
        DownloadEntity downloadEntity = entity.getDownloadEntity();
        if (downloadEntity != null) {
            stmt.bindString(13, downloadEntityConverter.convertToDatabaseValue(downloadEntity));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyDownLoadInfo readEntity(Cursor cursor, int offset) {
        MyDownLoadInfo entity = new MyDownLoadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // schoolName
            cursor.getInt(offset + 4), // schoolId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // productName
            cursor.getInt(offset + 6), // produceId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // courseName
            cursor.getInt(offset + 8), // courseId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fileName
            cursor.getInt(offset + 10), // fileId
            cursor.getInt(offset + 11), // lastProgress
            cursor.isNull(offset + 12) ? null : downloadEntityConverter.convertToEntityProperty(cursor.getString(offset + 12)) // downloadEntity
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyDownLoadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setFileType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSchoolName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSchoolId(cursor.getInt(offset + 4));
        entity.setProductName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProduceId(cursor.getInt(offset + 6));
        entity.setCourseName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCourseId(cursor.getInt(offset + 8));
        entity.setFileName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileId(cursor.getInt(offset + 10));
        entity.setLastProgress(cursor.getInt(offset + 11));
        entity.setDownloadEntity(cursor.isNull(offset + 12) ? null : downloadEntityConverter.convertToEntityProperty(cursor.getString(offset + 12)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyDownLoadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyDownLoadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyDownLoadInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
