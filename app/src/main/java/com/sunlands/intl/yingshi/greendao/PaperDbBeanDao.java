package com.sunlands.intl.yingshi.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sunlands.intl.yingshi.greendao.db.PaperDbBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAPER_DB_BEAN".
*/
public class PaperDbBeanDao extends AbstractDao<PaperDbBean, String> {

    public static final String TABLENAME = "PAPER_DB_BEAN";

    /**
     * Properties of entity PaperDbBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ThesisId = new Property(0, String.class, "thesisId", true, "THESIS_ID");
        public final static Property SubjectName = new Property(1, String.class, "subjectName", false, "SUBJECT_NAME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property FileUrl = new Property(3, String.class, "fileUrl", false, "FILE_URL");
        public final static Property EditUrl = new Property(4, String.class, "editUrl", false, "EDIT_URL");
        public final static Property FileSize = new Property(5, Long.class, "fileSize", false, "FILE_SIZE");
        public final static Property FilePath = new Property(6, String.class, "filePath", false, "FILE_PATH");
    }


    public PaperDbBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PaperDbBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAPER_DB_BEAN\" (" + //
                "\"THESIS_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: thesisId
                "\"SUBJECT_NAME\" TEXT," + // 1: subjectName
                "\"TITLE\" TEXT," + // 2: title
                "\"FILE_URL\" TEXT," + // 3: fileUrl
                "\"EDIT_URL\" TEXT," + // 4: editUrl
                "\"FILE_SIZE\" INTEGER," + // 5: fileSize
                "\"FILE_PATH\" TEXT);"); // 6: filePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAPER_DB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PaperDbBean entity) {
        stmt.clearBindings();
 
        String thesisId = entity.getThesisId();
        if (thesisId != null) {
            stmt.bindString(1, thesisId);
        }
 
        String subjectName = entity.getSubjectName();
        if (subjectName != null) {
            stmt.bindString(2, subjectName);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(4, fileUrl);
        }
 
        String editUrl = entity.getEditUrl();
        if (editUrl != null) {
            stmt.bindString(5, editUrl);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(6, fileSize);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(7, filePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PaperDbBean entity) {
        stmt.clearBindings();
 
        String thesisId = entity.getThesisId();
        if (thesisId != null) {
            stmt.bindString(1, thesisId);
        }
 
        String subjectName = entity.getSubjectName();
        if (subjectName != null) {
            stmt.bindString(2, subjectName);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(4, fileUrl);
        }
 
        String editUrl = entity.getEditUrl();
        if (editUrl != null) {
            stmt.bindString(5, editUrl);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(6, fileSize);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(7, filePath);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PaperDbBean readEntity(Cursor cursor, int offset) {
        PaperDbBean entity = new PaperDbBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // thesisId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subjectName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // editUrl
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // fileSize
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // filePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PaperDbBean entity, int offset) {
        entity.setThesisId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSubjectName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEditUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFileSize(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setFilePath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PaperDbBean entity, long rowId) {
        return entity.getThesisId();
    }
    
    @Override
    public String getKey(PaperDbBean entity) {
        if(entity != null) {
            return entity.getThesisId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PaperDbBean entity) {
        return entity.getThesisId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
